<!DOCTYPE html>
<html>

<head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
        <% /* <meta name="robots" content="noindex"> */%>



            <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

            <!--STYLES-->
            <link rel="stylesheet" href="/min/production.min.css">
            <!--STYLES END-->
            <script src="https://kit.fontawesome.com/b0ea4541a8.js" crossorigin="anonymous"></script>
</head>

<body>
    <div id="wrapper">
        <nav class="bd-navbar navbar" role="navigation" aria-label="main navigation" style="max-height: none;">
            <div class="navbar-brand">
                <a class="navbar-item" href="/">
                    <img src="/images/new.png" alt="logo">
                </a>

                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false"
                    data-target="navbarBasicExample">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="navbarBasicExample" class="navbar-menu">
                <div class="navbar-center">
                    <form id="search_form">
                        <div class="navbar-item field has-addons">
                            <p class="control is-expanded">
                                <input class="input" name="query" type="text" placeholder="I'm looking for..." required>
                            </p>
                            <p class="control">
                                <button class="button" type="submit">
                                    Search
                                </button>
                            </p>
                        </div>
                    </form>
                    <a class="navbar-item is-hidden-desktop">
                        <p>Nutrition</p>
                    </a>
                    <a class="navbar-item is-hidden-desktop">
                        <p>Fitnessziele</p>
                    </a>
                    <a class="navbar-item is-hidden-desktop">
                        <p>Ern√§hrungsformen</p>
                    </a>
                    <a class="navbar-item is-hidden-desktop">
                        <p>Kleidung</p>
                    </a>
                </div>
                <div class="navbar-end">
                    <a class="navbar-item" href="/login">
                        <span class="icon-text">
                            <span class="icon">
                                <img src="images/user.png" alt="User">
                            </span>
                            <span>Konto</span>
                        </span>
                    </a> <a class="navbar-item">
                        <span class="icon-text">
                            <span class="icon">
                                <img src="images/Warenkorb.png" alt="Warenkorb">
                            </span>
                            <span>Warenkorb</span>
                        </span>
                    </a>
                </div>
            </div>
        </nav>

        <div class="container is-fluid ">
            <div class="columns">
                <div class="column is-2">
                    <aside class="menu">
                        <p class="menu-label">
                            General
                        </p>
                        <ul class="menu-list">
                            <li><a href="/admin">Admin</a></li>
                            <li><a href="/product/product">Products</a></li>
                            <li>
                                <ul>
                                    <li><a>Categories</a></li>
                                </ul>
                            </li>
                            <li><a>Users</a></li>
                            <li><a>Orders</a></li>
                        </ul>
                    </aside>
                </div>
                <div class="column is-10">
                    <%- body %>
                </div>
            </div>
        </div>
    </div>
    <footer class="footer">
        <div class="content has-text centered">
            <div class="links">
                <div class="level-item">
                    Informationen
                </div>
                <div class="level-item">
                    Kundenservice
                </div>
                <div class="level-item">
                    Hilfe
                </div>
                <div class="level-item pt-3">
                    <p>Copyright 2022 GAINZ</p>
                </div>
            </div>
        </div>

    </footer>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/concat/production.js"></script>
    <!--SCRIPTS END-->

</body>

</html>